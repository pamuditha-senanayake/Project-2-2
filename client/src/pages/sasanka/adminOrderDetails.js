import React, {useEffect, useState} from 'react';
import Sidebar from '../com/admindash';
import {useNavigate} from 'react-router-dom';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import homepic7 from "../../images/f.jpg";

// Custom hook for debouncing a value
const useDebounce = (value, delay) => {
    const [debouncedValue, setDebouncedValue] = useState(value);

    useEffect(() => {
        const handler = setTimeout(() => {
            setDebouncedValue(value);
        }, delay);

        return () => {
            clearTimeout(handler);
        };
    }, [value, delay]);

    return debouncedValue;
};

const OrdersLayout = () => {
    const [orders, setOrders] = useState([]);
    const [searchQuery, setSearchQuery] = useState("");
    const navigate = useNavigate();
    const debouncedSearchQuery = useDebounce(searchQuery, 300); // 300ms delay

    useEffect(() => {
        const checkAdmin = async () => {
            try {
                const response = await fetch('https://servertest-isos.onrender.com/api/user/admin', {
                    credentials: 'include'
                });

                if (response.status === 403 || response.status === 401) {
                    navigate('/');
                    return;
                }

                const data = await response.json();
                if (!data.isAdmin) {
                    navigate('/');
                }
            } catch (error) {
                console.error('Error checking user role:', error);
                navigate('/');
            }
        };

        const fetchOrders = async () => {
            try {
                const response = await fetch('https://servertest-isos.onrender.com/api/user/orders', {
                    credentials: 'include'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                console.log('Fetched orders:', data);

                if (Array.isArray(data)) {
                    setOrders(data);
                } else {
                    console.error('Fetched data is not an array:', data);
                }
            } catch (error) {
                console.error('Error fetching orders:', error);
            }
        };

        checkAdmin();
        fetchOrders();
    }, [navigate]);

    const formatDate = (dateString) => {
        const options = {year: 'numeric', month: 'long', day: 'numeric'};
        const date = new Date(dateString);
        return date.toLocaleDateString(undefined, options); // Format date
    };

    const filteredOrders = Array.isArray(orders) ? orders.filter(
        (order) =>
            (order.user_id && order.user_id.toString().includes(debouncedSearchQuery)) ||
            (order.total_cost && order.total_cost.toString().includes(debouncedSearchQuery)) ||
            (order.shipping_details && JSON.stringify(order.shipping_details).toLowerCase().includes(debouncedSearchQuery.toLowerCase()))
    ) : [];

    const generateReport = () => {
        const doc = new jsPDF();
        doc.setFontSize(18);
        doc.text('Orders Report', 14, 22);

        const columns = ['Order ID', 'User ID', 'Total Cost', 'Shipping Details', 'Order Date'];
        const data = filteredOrders.map(order => [
            order.id,
            order.user_id,
            order.total_cost,
            typeof order.shipping_details === 'object'
                ? `${order.shipping_details.name}, ${order.shipping_details.address}, ${order.shipping_details.city}`
                : order.shipping_details,
            formatDate(order.created_at) // Assuming order.date contains the date string
        ]);

        doc.autoTable({
            startY: 30,
            head: [columns],
            body: data,
            theme: 'grid',
            margin: {horizontal: 14},
            styles: {fontSize: 10},
        });

        doc.setFontSize(10);
        doc.text('Generated by Salon Diamond - Admin', 14, doc.internal.pageSize.height - 10);
        doc.save('orders_report.pdf');
    };

    return (
        <div className="flex h-screen">
            <div className="w-[20%] h-full text-white"
                 style={{
                     backgroundImage: `url(${homepic7})`,
                     backgroundSize: 'cover',
                     backgroundPosition: 'center',
                     backgroundRepeat: 'no-repeat',
                 }}>
                <Sidebar/>
            </div>
            <div className="w-[80%] h-full bg-pink-500 p-4 julius-sans-one-regular overflow-auto"
                 style={{
                     backgroundImage: `url(${homepic7})`,
                     backgroundSize: 'cover',
                     backgroundPosition: 'center',
                     backgroundRepeat: 'no-repeat',
                 }}>
                <div className="p-6 bg-white rounded-lg shadow-md overflow-x-auto">
                    <h1 className="text-3xl">Order Information</h1>
                    <br/>

                    <input
                        type="text"
                        placeholder="Search orders..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="mb-4 p-2 border border-gray-300 rounded"
                    />

                    <button
                        onClick={generateReport}
                        className="mb-4 bg-black text-white px-4 py-2 rounded hover:bg-pink-700"
                    >
                        Generate Report
                    </button>

                    <table className="min-w-full bg-gray-100 border border-gray-300 rounded-lg">
                        <thead>
                        <tr className="bg-gray-200 text-gray-600 border-b border-gray-300">
                            <th className="py-2 px-4 text-left">Order ID</th>
                            <th className="py-2 px-4 text-left">User ID</th>
                            <th className="py-2 px-4 text-left">Total Cost</th>
                            <th className="py-2 px-4 text-left">Shipping Details</th>
                            <th className="py-2 px-4 text-left">Order Date</th>
                        </tr>
                        </thead>
                        <tbody>
                        {filteredOrders.map((order) => (
                            <tr key={order.id} className="border-b border-gray-300">
                                <td className="py-2 px-4 text-gray-700">{order.id}</td>
                                <td className="py-2 px-4 text-gray-700">{order.user_id}</td>
                                <td className="py-2 px-4 text-gray-700">{order.total_cost}</td>
                                <td className="py-2 px-4 text-gray-700">
                                    {typeof order.shipping_details === 'object'
                                        ? `${order.shipping_details.name}, ${order.shipping_details.address}, ${order.shipping_details.city}`
                                        : order.shipping_details}
                                </td>
                                <td className="py-2 px-4 text-gray-700">{formatDate(order.created_at)}</td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

export default OrdersLayout;